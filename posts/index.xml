<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Sharp Dev</title><link>https://thesharpdev.com/posts/</link><description>Recent content in Posts on The Sharp Dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; Copyright notice</copyright><lastBuildDate>Sat, 01 Feb 2020 08:47:11 +0100</lastBuildDate><atom:link href="https://thesharpdev.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Temp/Humidity IoT - Part 42</title><link>https://thesharpdev.com/posts/th-iot-part-4/</link><pubDate>Sat, 01 Feb 2020 08:47:11 +0100</pubDate><guid>https://thesharpdev.com/posts/th-iot-part-4/</guid><description>In the part three we set up a daemon to send data to Adafruit IO. This gave us a slick dashboard to view live and historical data.
In this part, we will go through setting up a mobile app to give us a quick way to look at the live data on the go. Someone was telling me how easy React Native was to get up and running with, so I decided to give it a shot.</description></item><item><title>Temp/Humidity IoT - Part 3</title><link>https://thesharpdev.com/posts/th-iot-part-3/</link><pubDate>Fri, 10 Jan 2020 08:47:11 +0100</pubDate><guid>https://thesharpdev.com/posts/th-iot-part-3/</guid><description>In the part two we assembled the hardware and were able to read data off of the DHT22 sensor. Then we took that data and displayed it on a web page.
During this part, we will go over how to send this data to the cloud and chart it. This way we can view trends and live information from the internet.
I was going to just document the successful outcome, but then I realized that would just cover up that sometimes we need to fail and pivot.</description></item><item><title>Temp/Humidity IoT - Part 2</title><link>https://thesharpdev.com/posts/th-iot-part-2/</link><pubDate>Sun, 05 Jan 2020 08:47:11 +0100</pubDate><guid>https://thesharpdev.com/posts/th-iot-part-2/</guid><description>In the part one we focused on getting the operating system installed and setting up our web service. In this part we will focus on attaching the sensor and reading data from it.
Some Assembly Required There are several ways you can attach the sensor (e.g: bread board, connector wires, solder directly to pinouts, etc). I chose to use connector wires so I could move things around easily if I needed to.</description></item><item><title>Temp/Humidity IoT - Part 1</title><link>https://thesharpdev.com/posts/th-iot-part-1/</link><pubDate>Tue, 31 Dec 2019 08:47:11 +0100</pubDate><guid>https://thesharpdev.com/posts/th-iot-part-1/</guid><description>Winters in the midwest can be pretty dry, and I&amp;rsquo;m particularly susceptible to the dry air. In order to keep the humidity at the ideal level I went on the hunt for a humidity sensor. Then I thought to myself, &amp;ldquo;that&amp;rsquo;s a bit too easy&amp;rdquo;, and decided I could build my own.
The Vision The MVP Read temperature Read temperature Read humidity Read humidity Report to &amp;ldquo;da cloud&amp;rdquo; Viewable on a website - local network Viewable on a mobile app Viewable on a website - cloud Tools The raw materials we use to build our vision üèóÔ∏è</description></item></channel></rss>